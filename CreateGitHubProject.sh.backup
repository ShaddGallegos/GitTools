#!/bin/bash

# Enhanced GitHub Project Management Script
# Handles repository creation and deletion with authentication, error checking, and modern Git practices
#
# Features:
# - Create new GitHub repositories with local setup
# - Delete repositories from both GitHub and local filesystem
# - Support for GitHub.com and GitHub Enterprise
# - Comprehensive error handling and safety confirmations
# - Secure token-based authentication
#
# Usage:
#   ./CreateGitHubProject.sh [--help] [--create] [--delete]
#
# Requirements:
# - curl (for GitHub API calls)
# - git (for repository operations)
# - GitHub Personal Access Token with appropriate scopes:
#   - For creation: 'repo' scope
#   - For deletion: 'delete_repo' scope
#
# Author: Enhanced with repository deletion functionality
# Date: August 29, 2025

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to show help
show_help() {
  echo "GitHub Project Management Tool"
  echo ""
  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  -h, --help     Show this help message"
  echo "  -c, --create   Go directly to repository creation"
  echo "  -d, --delete   Go directly to repository deletion"
  echo ""
  echo "Interactive Mode (default):"
  echo "  Run without arguments to see the menu interface"
  echo ""
  echo "Examples:"
  echo "  $0              # Show interactive menu"
  echo "  $0 --create     # Create new repository"
  echo "  $0 --delete     # Delete repository"
  echo "  $0 --help       # Show this help"
  echo ""
  echo "Requirements:"
  echo "  - GitHub Personal Access Token"
  echo "  - curl and git commands available"
  echo "  - For creation: token needs 'repo' scope"
  echo "  - For deletion: token needs 'delete_repo' scope"
}

# Function to remove a repository both from GitHub and locally
remove_repository() {
  echo ""
  echo "=========================================="
  echo " GitHub Repository Removal Tool"
  echo "=========================================="
  echo ""
  print_warning "[WARNING]  WARNING: This will permanently delete the repository!"
  print_warning "[WARNING]  This action CANNOT be undone!"
  echo ""
  
  # Get repository information
  read -p "Enter repository name to delete: " repo_name
  if [[ -z "$repo_name" ]]; then
    print_error "Repository name cannot be empty"
    return 1
  fi
  
  read -p "Enter GitHub username/organization: " gh_user
  if [[ -z "$gh_user" ]]; then
    print_error "Username/organization cannot be empty"
    return 1
  fi
  
  read -p "Enter GitHub domain (press Enter for github.com): " github_url
  if [[ -z "$github_url" ]]; then
    github_url="github.com"
    api_url="https://api.github.com"
  else
    # Clean up domain input
    github_url=${github_url#https://}
    github_url=${github_url#http://}
    github_url=${github_url%/}
    
    if [[ "$github_url" == "github.com" ]]; then
      api_url="https://api.github.com"
    else
      api_url="https://$github_url/api/v3"
    fi
  fi
  
  # Get GitHub token
  echo ""
  print_status "GitHub Token Required (needs 'delete_repo' scope)"
  read -s -p "Enter your GitHub Personal Access Token: " gh_token
  echo ""
  
  if [[ -z "$gh_token" ]]; then
    print_error "GitHub token cannot be empty"
    return 1
  fi
  
  # Final confirmation
  echo ""
  print_warning "You are about to delete:"
  echo "  Repository: ${RED}$gh_user/$repo_name${NC}"
  echo "  GitHub URL: ${RED}https://$github_url/$gh_user/$repo_name${NC}"
  echo ""
  read -p "Type 'DELETE' to confirm permanent removal: " confirmation
  
  if [[ "$confirmation" != "DELETE" ]]; then
    print_status "Operation cancelled by user"
    return 0
  fi
  
  # Check if local directory exists and get its path
  local_repo_path=""
  if [[ -d "$repo_name" ]]; then
    local_repo_path="$(pwd)/$repo_name"
    print_status "Found local repository at: $local_repo_path"
  elif [[ -d "../$repo_name" ]]; then
    local_repo_path="$(cd .. && pwd)/$repo_name"
    print_status "Found local repository at: $local_repo_path"
  else
    read -p "Enter full path to local repository (or press Enter to skip local deletion): " local_repo_path
  fi
  
  # Step 1: Delete from GitHub
  print_status "Deleting repository from GitHub..."
  http_response=$(curl -s -w "%{http_code}" \
    -X DELETE \
    -H "Authorization: token $gh_token" \
    -H "Accept: application/vnd.github.v3+json" \
    "$api_url/repos/$gh_user/$repo_name" \
    -o /tmp/github_delete_response.json)
  
  if [[ "$http_response" == "204" ]]; then
    print_success "[SUCCESS] Repository successfully deleted from GitHub!"
  elif [[ "$http_response" == "404" ]]; then
    print_warning "Repository not found on GitHub (may already be deleted)"
  elif [[ "$http_response" == "403" ]]; then
    print_error "[ERROR] Access denied. Check your token permissions (needs 'delete_repo' scope)"
    cat /tmp/github_delete_response.json 2>/dev/null || true
    rm -f /tmp/github_delete_response.json
    return 1
  else
    print_error "[ERROR] Failed to delete repository from GitHub (HTTP: $http_response)"
    cat /tmp/github_delete_response.json 2>/dev/null || true
    rm -f /tmp/github_delete_response.json
    return 1
  fi
  
  rm -f /tmp/github_delete_response.json
  
  # Step 2: Delete local repository if path provided
  if [[ -n "$local_repo_path" && -d "$local_repo_path" ]]; then
    print_status "Deleting local repository..."
    
    # Verify it's a git repository
    if [[ -d "$local_repo_path/.git" ]]; then
      # Remove read-only permissions that might prevent deletion
      chmod -R +w "$local_repo_path" 2>/dev/null || true
      
      # Remove the directory
      if rm -rf "$local_repo_path"; then
        print_success "[SUCCESS] Local repository deleted: $local_repo_path"
      else
        print_error "[ERROR] Failed to delete local repository: $local_repo_path"
        print_error "You may need to delete it manually"
        return 1
      fi
    else
      print_warning "Directory exists but is not a Git repository: $local_repo_path"
      read -p "Delete anyway? (y/N): " delete_anyway
      if [[ "$delete_anyway" =~ ^[Yy]$ ]]; then
        chmod -R +w "$local_repo_path" 2>/dev/null || true
        if rm -rf "$local_repo_path"; then
          print_success "[SUCCESS] Directory deleted: $local_repo_path"
        else
          print_error "[ERROR] Failed to delete directory: $local_repo_path"
          return 1
        fi
      else
        print_status "Local directory deletion skipped"
      fi
    fi
  elif [[ -n "$local_repo_path" ]]; then
    print_warning "Local repository path does not exist: $local_repo_path"
  else
    print_status "Local repository deletion skipped"
  fi
  
  echo ""
  echo "=========================================="
  print_success "Repository removal completed!"
  echo "=========================================="
  
  return 0
}

# Function to create a repository (existing functionality)
create_repository() {
  echo ""
  echo "GitHub Instance Configuration:"
  echo " For GitHub.com: Just press Enter"
  echo " For Enterprise: Enter domain only (e.g., github.company.com)"
  echo ""

  read -p "Enter GitHub domain (press Enter for github.com): " github_url
  if [[ -z "$github_url" ]]; then
    github_url="github.com"
    api_url="https://api.github.com"
  else
    # Remove protocol if provided
    github_url=${github_url#https://}
    github_url=${github_url#http://}
    # Remove trailing slash if present
    github_url=${github_url%/}

    # Extract domain from URL (remove username/org paths)
    if [[ "$github_url" == *"github.com"* ]]; then
      github_url="github.com"
    else
      # For enterprise instances, take only the domain part
      github_url=$(echo "$github_url" | cut -d'/' -f1)
    fi

    # Set API URL based on GitHub instance
    if [[ "$github_url" == "github.com" ]]; then
      api_url="https://api.github.com"
    else
      api_url="https://$github_url/api/v3"
    fi
  fi

  print_status "Using GitHub instance: ${BLUE}$github_url${NC}"
  print_status "API endpoint: ${BLUE}$api_url${NC}"

  read -p "Enter full path to your local project directory: " project_path
  read -p "Enter your GitHub username: " gh_user
  read -s -p "Enter your GitHub personal access token: " gh_token
  echo ""

  # Validate inputs
  if [[ -z "$project_path" || -z "$gh_user" || -z "$gh_token" ]]; then
    print_error "All fields are required!"
    exit 1
  fi

  # Extract repo name from the last folder in the path
  repo_name=$(basename "$project_path")
  repo_url="https://${gh_token}@${github_url}/$gh_user/$repo_name.git"

  # Navigate to the project directory
  print_status "Navigating to project directory: $project_path"
  cd "$project_path" || {
    print_error "Directory not found: $project_path"
    exit 1
  }

  # Initialize Git repo if not already
  if [ ! -d ".git" ]; then
    print_status "Initializing Git repository..."
    git init
    git config init.defaultBranch main
  else
    print_status "Git repository already exists"
  fi

  # Check if there are any files to commit
  if git diff --cached --exit-code >/dev/null && git diff --exit-code >/dev/null && [ -z "$(git ls-files)" ]; then
    print_warning "No files found to commit. Adding all files..."
    git add .
  fi

  # Check if there are uncommitted changes
  if ! git diff --cached --exit-code >/dev/null; then
    print_status "Committing changes..."
    git commit -m "Initial commit - automated upload"
  elif [ -n "$(git ls-files)" ] && [ -z "$(git log --oneline -1 2>/dev/null)" ]; then
    print_status "Creating initial commit..."
    git add .
    git commit -m "Initial commit - automated upload"
  else
    print_status "Repository is already committed and up to date"
  fi

  # Create repo on GitHub using API
  print_status "Creating GitHub repository: $repo_name"
  response=$(curl -s -w "%{http_code}" -u "$gh_user:$gh_token" \
    "$api_url/user/repos" \
    -d "{\"name\":\"$repo_name\",\"private\":false}" \
    -o /tmp/github_response.json)

  http_code="${response: -3}"

  if [[ "$http_code" == "201" ]]; then
    print_success "GitHub repository created successfully!"
  elif [[ "$http_code" == "422" ]]; then
    if grep -q "name already exists" /tmp/github_response.json; then
      print_warning "Repository already exists on GitHub. Continuing with push..."
    else
      print_error "Repository creation failed. Response:"
      cat /tmp/github_response.json
      exit 1
    fi
  else
    print_error "Failed to create repository. HTTP Code: $http_code"
    cat /tmp/github_response.json
    exit 1
  fi

  # Add remote if it doesn't exist
  if ! git remote get-url origin >/dev/null 2>&1; then
    print_status "Adding remote origin..."
    git remote add origin "$repo_url"
  else
    print_status "Remote origin already exists, updating URL..."
    git remote set-url origin "$repo_url"
  fi

  # Ensure we're on main branch
  current_branch=$(git branch --show-current)
  if [[ "$current_branch" != "main" ]]; then
    print_status "Switching to main branch..."
    git branch -M main
  fi

  # Push to GitHub
  print_status "Pushing to GitHub..."
  if git push -u origin main 2>/dev/null; then
    print_success "Successfully pushed to GitHub!"
  else
    print_warning "Push failed with token in URL. Trying alternative method..."
    # Try using credential helper
    git config credential.helper store
    echo "https://${gh_user}:${gh_token}@${github_url}" > ~/.git-credentials

    if git push -u origin main; then
      print_success "Successfully pushed to GitHub!"
      # Clean up credentials
      rm -f ~/.git-credentials
      git config --unset credential.helper
    else
      print_error "Failed to push to GitHub. Please check your token permissions."
      print_error "Make sure your token has 'repo' scope enabled."
      rm -f ~/.git-credentials
      git config --unset credential.helper 2>/dev/null || true
      exit 1
    fi
  fi

  # Clean up
  rm -f /tmp/github_response.json

  echo ""
  echo "=========================================="
  print_success "Project '$repo_name' has been successfully pushed to GitHub!"
  echo "Repository URL: ${BLUE}https://$github_url/$gh_user/$repo_name${NC}"
  echo "=========================================="
}

# Parse command line arguments
case "${1:-}" in
  -h|--help)
    show_help
    exit 0
    ;;
  -c|--create)
    echo "=========================================="
    echo " GitHub Project Creation"
    echo "=========================================="
    create_repository
    exit 0
    ;;
  -d|--delete)
    remove_repository
    exit 0
    ;;
  "")
    # No arguments, continue with interactive menu
    ;;
  *)
    print_error "Unknown option: $1"
    echo "Use --help for usage information"
    exit 1
    ;;
esac

# Interactive menu
echo ""
echo "=========================================="
echo " GitHub Project Management Tool"
echo "=========================================="
echo ""
echo "Choose an action:"
echo "1) Create new repository"
echo "2) Delete repository (GitHub + Local)"
echo "3) Exit"
echo ""
read -p "Enter your choice (1-3): " choice

case $choice in
  1)
    echo ""
    echo "=========================================="
    echo " GitHub Project Creation"
    echo "=========================================="
    create_repository
    ;;
  2)
    remove_repository
    ;;
  3)
    print_status "Goodbye!"
    exit 0
    ;;
  *)
    print_error "Invalid choice. Please run the script again."
    exit 1
    ;;
esac
